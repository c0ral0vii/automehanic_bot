from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from database.db_config import get_price_for_user, get_product_by_article_or_cross_number
from keyboards.inline.catalog_keyboard import create_catalog_keyboard, create_more_info_keyboard, create_product_keyboard, create_product_only_order, create_simple_inline_navigation
from keyboards.reply.main_keyboard import create_main_keyboard
from utils.texts import get_greeting_text
from aiogram.types import InputMediaPhoto
from sqlalchemy.exc import NoResultFound
from utils.send_email import send_order_email
from filters.excluded_message import ExcludedMessage
from fsm.catalog_fsm import Form
import pandas as pd

catalog_router = Router(name="catalog")
catalog_router.message.filter(ExcludedMessage())


@catalog_router.message(StateFilter(None), F.text == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥')
async def catalog_handler(message: types.Message):
    text = get_greeting_text()
    keyboard = create_catalog_keyboard()
    await message.answer(text, reply_markup=keyboard)


@catalog_router.callback_query(lambda c: c.data == "request_single_article")
async def handle_single_article_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:", reply_markup=create_simple_inline_navigation())
    await state.set_state(Form.article)

@catalog_router.callback_query(lambda c: c.data == "request_multiple_articles")
async def handle_multiple_articles_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –Ω—É–∂–Ω–æ), –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)")
    await state.set_state(Form.multiple_articles)

@catalog_router.callback_query(lambda c: c.data == "cancel", StateFilter(Form))
@catalog_router.message(Command("cancel"), StateFilter(Form))
async def cancel_handler(callback_query: types.CallbackQuery | types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    keyboard = create_main_keyboard()
    if isinstance(callback_query, types.CallbackQuery):
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard)
    else:
        await callback_query.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard)

@catalog_router.callback_query(lambda c: c.data == "back", StateFilter(Form))
@catalog_router.message(Command("back"), StateFilter(Form))
async def back_step_handler(callback_query: types.CallbackQuery | types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    keyboard = create_simple_inline_navigation()
    previous = None

    if current_state == Form.article:
        if isinstance(callback_query, types.CallbackQuery):
            await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:', reply_markup=keyboard)
        else:
            await callback_query.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:', reply_markup=keyboard)
        return

    if current_state == Form.multiple_articles:
        if isinstance(callback_query, types.CallbackQuery):
            await callback_query.message.answer("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –Ω—É–∂–Ω–æ)," \
                                         " –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)", reply_markup=keyboard)
        else:
            await callback_query.answer("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –Ω—É–∂–Ω–æ)," \
                                         " –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)", reply_markup=keyboard)
        return

    for step in Form.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            if isinstance(callback_query, types.CallbackQuery):
                await callback_query.message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {Form.texts[previous.state]}", reply_markup=keyboard)
            else:
                await callback_query.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {Form.texts[previous.state]}", reply_markup=keyboard)
            return
        previous = step


@catalog_router.message(Form.article, F.text )
async def process_article_input(message: types.Message, state: FSMContext):
    await state.update_data(article=message.text)
    data = await state.get_data()
    article_or_cross = data['article'].strip()
    user_id = message.from_user.id
    await state.update_data(user_id=user_id)

    try:
        price = await get_price_for_user(user_id, article_or_cross)

        if price is None:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        product = await get_product_by_article_or_cross_number(article_or_cross)

        if product is not None:
            response_text = (
                f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                f"–¶–µ–Ω–∞: {price}\n\n"
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –í–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω. "
                "–ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏."
            )
            keyboard = create_more_info_keyboard()
            await message.answer(response_text, reply_markup=keyboard)
        else:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except NoResultFound:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.")

@catalog_router.callback_query(lambda c: c.data == "view_details")
async def handle_view_details(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    article_or_cross = data.get('article').strip()
    user_id = data.get('user_id')

    try:
        price = await get_price_for_user(user_id, article_or_cross)

        if price is None:
            await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        product = await get_product_by_article_or_cross_number(article_or_cross)

        if product is not None:
            response_text = (
                f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                f"–¶–µ–Ω–∞: {price}\n\n"
                f"–ë—Ä–µ–Ω–¥: {product.brand if product.brand is not None else '‚Äî'}\n"
                f"–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞: {product.product_group if product.product_group is not None else '‚Äî'}\n"
                f"–¢–∏–ø –∑–∞–ø—á–∞—Å—Ç–∏: {product.part_type if product.part_type is not None else '‚Äî'}\n"
                f"–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–æ–≤: {product.applicability_brands if product.applicability_brands is not None else '‚Äî'}\n"
                f"–ü—Ä–∏–º–µ–Ω–∏–º–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: {product.applicable_tech if product.applicable_tech is not None else '‚Äî'}\n"
                f"–í–µ—Å (–∫–≥): {product.weight_kg if product.weight_kg is not None else '‚Äî'}\n"
                f"–î–ª–∏–Ω–∞ (–º): {product.length_m if product.length_m is not None else '‚Äî'}\n"
                f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä (–º–º): {product.inner_diameter_mm if product.inner_diameter_mm is not None else '‚Äî'}\n"
                f"–í–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä (–º–º): {product.outer_diameter_mm if product.outer_diameter_mm is not None else '‚Äî'}\n"
                f"–î–∏–∞–º–µ—Ç—Ä —Ä–µ–∑—å–±—ã (–º–º): {product.thread_diameter_mm if product.thread_diameter_mm is not None else '‚Äî'}\n\n"
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –í–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω. "
                "–ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏."
            )


            keyboard = create_product_only_order()
            media = []
            if product.photo_url_1:
                media.append(InputMediaPhoto(media=product.photo_url_1))
            if product.photo_url_2:
                media.append(InputMediaPhoto(media=product.photo_url_2))
            if product.photo_url_3:
                media.append(InputMediaPhoto(media=product.photo_url_3))

            if media:
                await callback_query.message.bot.send_media_group(chat_id=callback_query.message.chat.id, media=media)

            await callback_query.message.answer(response_text, reply_markup=keyboard)


        else:
            await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except NoResultFound:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.")

@catalog_router.message(Form.multiple_articles, F.document)
async def process_xlsx_file(message: types.Message, state: FSMContext):
    document_id = message.document.file_id
    document = await message.bot.get_file(document_id)

    file_path = await message.bot.download_file(document.file_path)

    try:
        df = pd.read_excel(file_path, header=None, engine='openpyxl')
        df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ö—Ä–æ—Å—Å-–Ω–æ–º–µ—Ä–∞']

        response = []
        user_id = message.from_user.id

        for index, row in df.iterrows():
            article_or_cross = str(row['–ê—Ä—Ç–∏–∫—É–ª']).strip()
            cross_numbers = str(row['–ö—Ä–æ—Å—Å-–Ω–æ–º–µ—Ä–∞']).strip().split(';')
            price = await get_price_for_user(user_id, article_or_cross)

            if price is None:
                for cross in cross_numbers:
                    cross = cross.strip()
                    price = await get_price_for_user(user_id, cross)
                    if price is not None:
                        break

            product = await get_product_by_article_or_cross_number(article_or_cross)

            if product and price is not None:
                response.append(
                    f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                    f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                    f"–¶–µ–Ω–∞: {price}\n\n"
                )
            else:
                if not product:
                    for cross in cross_numbers:
                        cross = cross.strip()
                        product = await get_product_by_article_or_cross_number(cross)
                        if product:
                            break

                if product:
                    response.append(
                        f"–¢–æ–≤–∞—Ä —Å –∫—Ä–æ—Å—Å-–Ω–æ–º–µ—Ä–æ–º {cross}:\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                        f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                        f"–¶–µ–Ω–∞: {price}\n\n"
                    )
                else:
                    response.append(f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article_or_cross} –∏ –∫—Ä–æ—Å—Å-–Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")

        keyboard = create_product_keyboard()
        await message.answer(''.join(response), reply_markup=keyboard)

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞: {str(ve)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(Form.multiple_articles)

@catalog_router.message(Form.multiple_articles, F.text)
async def process_multiple_articles_input(message: types.Message, state: FSMContext):
    articles_data = message.text.strip().split('\n')
    response = []
    user_id = message.from_user.id

    for article_or_cross in articles_data:
        article_or_cross = article_or_cross.strip()
        if not article_or_cross:
            continue
        price = await get_price_for_user(user_id, article_or_cross)
        product = await get_product_by_article_or_cross_number(article_or_cross)
        if product and price:
            response.append(
                f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                f"–¶–µ–Ω–∞: {price}\n\n"
            )
        else:
            response.append(f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article_or_cross} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")

    if not response:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–∞–º.")
    else:
        keyboard = create_product_keyboard()
        await message.answer(''.join(response), reply_markup=keyboard)

@catalog_router.message(Form.article_quantity_input, F.text)
async def process_article_quantity_text_input(message: types.Message, state: FSMContext):
    articles_data = message.text.strip().split('\n')

    orders = []
    for item in articles_data:
        try:
            article, quantity = item.split(';')
            orders.append({
                'article': article.strip(),
                'quantity': int(quantity.strip())
            })
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: (–∞—Ä—Ç–∏–∫—É–ª; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
            return

    await state.update_data(orders=orders)
    keyboard = create_main_keyboard()
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞), —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.", reply_markup=keyboard)
    await state.set_state(Form.contact_info)

@catalog_router.message(Form.article_quantity_input, F.document)
async def process_article_quantity_xlsx_input(message: types.Message, state: FSMContext):
    document_id = message.document.file_id
    document = await message.bot.get_file(document_id)
    file_path = await message.bot.download_file(document.file_path)

    try:
        df = pd.read_excel(file_path, header=None, engine='openpyxl')
        df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        orders = []
        for index, row in df.iterrows():
            article_number = str(row['–ê—Ä—Ç–∏–∫—É–ª']).strip()
            quantity = int(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
            orders.append({'article': article_number, 'quantity': quantity})

        await state.update_data(orders=orders)
        keyboard = create_main_keyboard()
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞), —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.", reply_markup=keyboard)
        await state.set_state(Form.contact_info)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()

@catalog_router.callback_query(lambda c: c.data == "order_request")
async def handle_order_request(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = create_simple_inline_navigation()
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "- (–∞—Ä—Ç–∏–∫—É–ª; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞—Ä—Ç–∏–∫—É–ª, –≤—Ç–æ—Ä–æ–π - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –Ω—É–∂–Ω—ã).", reply_markup=keyboard
    )
    await state.set_state(Form.article_quantity_input)

@catalog_router.message(Form.contact_info, F.text)
async def process_contact_info(message: types.Message, state: FSMContext):
    contact_info = message.text.strip()
    data = await state.get_data()
    orders = data.get('orders', [])

    order_message = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
    for order in orders:
        order_message += f"–ê—Ä—Ç–∏–∫—É–ª: {order['article']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"

    order_message += f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{contact_info}"

    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    order_items = [(order['article'], order['quantity']) for order in orders]

    await send_order_email(user_id, username, order_items, contact_info)

    keyboard = create_main_keyboard()

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=keyboard)
    await state.clear()

