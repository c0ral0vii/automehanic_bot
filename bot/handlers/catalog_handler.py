from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from database.config import get_product
from keyboards.inline.catalog_keyboard import create_catalog_keyboard, create_product_keyboard, create_inline_navigation_keyboard
from utils.texts import get_greeting_text
from utils.send_email import send_order_email

catalog_router = Router(name="catalog")

texts = {
    'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫–ª—å –∑–∞–Ω–æ–≤–æ:'
}

@catalog_router.message(StateFilter(None), F.text == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥')
async def catalog_handler(message: types.Message):
    text = get_greeting_text()
    keyboard = create_catalog_keyboard()
    await message.answer(text, reply_markup=keyboard)

class Form(StatesGroup):
    article = State()
    multiple_articles = State()
    article_quantity_input = State()
    contact_info = State()

    texts = {
        'Form.article': '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ:',
        'Form.multiple_articles': '–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel, –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)',
        'Form.article_quantity_input': '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: (–∞—Ä—Ç–∏–∫—É–ª; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)',
        'Form.contact_info': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞), —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.'
    }


# inline keyboard callbacks
@catalog_router.callback_query(lambda c: c.data == "request_single_article")
async def handle_single_article_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:", reply_markup=create_inline_navigation_keyboard())
    await state.set_state(Form.article)

@catalog_router.callback_query(lambda c: c.data == "request_multiple_articles")
async def handle_multiple_articles_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.reply("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel, –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)")
    await state.set_state(Form.multiple_articles)

@catalog_router.callback_query(lambda c: c.data == "order_request")
async def handle_order_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "- (–∞—Ä—Ç–∏–∫—É–ª; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
    )
    await state.set_state(Form.article_quantity_input)


# fsm and cancel handlers
@catalog_router.callback_query(lambda c: c.data == "cancel")
async def cancel_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")

@catalog_router.callback_query(lambda c: c.data == "back")
async def back_step_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    keyboard = create_catalog_keyboard()

    if current_state == Form.article:
        await callback_query.message.answer(f'–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª', reply_markup=keyboard)
        return

    previous = None
    for step in Form.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await callback_query.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {Form.texts[previous.state]}")
            return
        previous = step

@catalog_router.message(Form.article, F.text)
async def process_article_input(message: types.Message, state: FSMContext):
    await state.update_data(article=message.text)
    data = await state.get_data()
    article_number = data['article']

    article_number = message.text.strip()
    product = await get_product(article_number)
    if product is not None:
        response_text = (
            f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
            f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
            f"–¶–µ–Ω–∞: {product.price}\n\n"
            "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –í–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω. "
            "–ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏."
        )
        keyboard = create_product_keyboard()
        await message.answer(response_text, reply_markup=keyboard)
    else:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@catalog_router.message(Form.multiple_articles, F.text)
async def process_multiple_articles_input(message: types.Message, state: FSMContext):
    articles = message.text.strip().split('\n')
    response = []
    for article_number in articles:
        product = await get_product(article_number.strip())
        if product:
            response.append(
                f"–ê—Ä—Ç–∏–∫—É–ª: {product.article_number}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–ù–∞–ª–∏—á–∏–µ: {product.amount}\n"
                f"–¶–µ–Ω–∞: {product.price}\n\n"
            )
        else:
            response.append(f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article_number.strip()} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")

    keyboard = create_product_keyboard()
    await message.answer(''.join(response), reply_markup=keyboard)

@catalog_router.message(Form.article_quantity_input, F.text)
async def process_article_quantity_input(message: types.Message, state: FSMContext):
    articles_data = message.text.strip().split('\n')

    orders = []
    for item in articles_data:
        try:
            article, quantity = item.split(';')
            orders.append({
                'article': article.strip(),
                'quantity': int(quantity.strip())
            })
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: (–∞—Ä—Ç–∏–∫—É–ª; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
            return

    await state.update_data(orders=orders)
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞), —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.")
    await state.set_state(Form.contact_info)

@catalog_router.message(Form.contact_info, F.text)
async def process_contact_info(message: types.Message, state: FSMContext):
    contact_info = message.text.strip()
    data = await state.get_data()
    orders = data.get('orders', [])

    order_message = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
    for order in orders:
        order_message += f"–ê—Ä—Ç–∏–∫—É–ª: {order['article']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"

    order_message += f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{contact_info}"

    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    order_items = [(order['article'], order['quantity']) for order in orders]

    await send_order_email(user_id, username, order_items, contact_info)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
    await state.clear()

