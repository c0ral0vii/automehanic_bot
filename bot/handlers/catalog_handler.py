from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline.catalog_keyboard import create_catalog_keyboard
from utils.texts import get_greeting_text

catalog_router = Router(name="catalog")

class Form(StatesGroup):
    waiting_for_article = State()

@catalog_router.message(F.text == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥')
async def catalog_handler(message: types.Message):
    text = get_greeting_text()
    keyboard = create_catalog_keyboard()
    await message.answer(text, reply_markup=keyboard)

@catalog_router.message(F.text & F.state(Form.waiting_for_article))
async def process_article_input(message: types.Message, state: FSMContext):
    try:
        article_number = message.text.strip()
        product_info = await get_product_info(article_number)
        if product_info:
            response_text = (
                f"–ê—Ä—Ç–∏–∫—É–ª: {product_info['article_number']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
                f"–ù–∞–ª–∏—á–∏–µ: {product_info['amount']}\n"
                f"–¶–µ–Ω–∞: {product_info['price']}\n\n"
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –í–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω. "
                "–ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏."
            )
            await message.answer(response_text)
        else:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@catalog_router.callback_query(lambda c: c.data == "request_single_article")
async def handle_single_article_request(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.reply("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:")
    await state.set_state(Form.waiting_for_article)

@catalog_router.callback_query(lambda c: c.data == "request_multiple_articles")
async def handle_multiple_articles_request(callback_query: types.CallbackQuery):
    await callback_query.message.reply("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel, –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–§–æ—Ä–º–∞—Ç: –∞—Ä—Ç–∏–∫—É–ª (–≤ —Å—Ç–æ–ª–±–∏–∫)")

async def get_product_info(article_number: str):
    dummy_product_data = {
        'article_number': '12345',
        'name': '–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞',
        'amount': '3',
        'price': '1000 ‚ÇΩ'
    }

    if article_number == '12345':
        return dummy_product_data
    return None