from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import os

presentation_router = Router(name="presentations")

PDF_FOLDER = 'bot/utils/data/presentations'

@presentation_router.message(StateFilter(None), F.text == 'üìë –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É')
async def send_presentations(message: types.Message):
    try:
        pdf_files = [f for f in os.listdir(PDF_FOLDER) if f.endswith('.pdf')]

        buttons = [[InlineKeyboardButton(text=pdf, callback_data=pdf)] for pdf in pdf_files]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=keyboard)
    except Exception as e:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

@presentation_router.callback_query(F.data.endswith('.pdf'))
async def send_pdf(call: types.CallbackQuery):
    pdf_path = os.path.join(PDF_FOLDER, call.data)

    if os.path.exists(pdf_path):
        await call.message.answer_document(document=types.FSInputFile(pdf_path))
        await call.answer()
    else:
        await call.message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.answer()
