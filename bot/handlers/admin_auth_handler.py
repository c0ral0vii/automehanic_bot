from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter, Command
from database.models import UserRole
from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply.admin_keyboard import create_admin_navigation, create_auth_navigation
from database.db_config import get_all_users, get_users_with_role_user, get_users_with_role_undefined, update_catalog, update_user_role
from utils.send_message import notify_user


admin_router = Router(name="admin")
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    keyboard = create_admin_navigation()
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

@admin_router.message(Command("cancel"))
@admin_router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    keyboard = create_admin_navigation()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@admin_router.callback_query(lambda cb: cb.data.startswith('accept_'))
async def accept_request(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await update_user_role(user_id, UserRole.USER)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
    await callback_query.message.delete()
    welcome_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
    )
    await notify_user(callback_query.bot, user_id, welcome_message)

@admin_router.callback_query(lambda cb: cb.data.startswith('reject_'))
async def reject_request(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await update_user_role(user_id, UserRole.CANCELLED)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback_query.message.delete()
    rejection_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
    )
    await notify_user(callback_query.bot, user_id, rejection_message)

@admin_router.message(StateFilter(None), F.text == 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
async def catalog_handler(message: types.Message):
    keyboard = create_auth_navigation()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –æ–ø—Ü–∏—é", reply_markup=keyboard)

@admin_router.message(StateFilter(None), F.text == '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
async def all_requests_handler(message: types.Message):
    users = await get_users_with_role_undefined()
    if users:
        for i, user in enumerate(users):
            user_info = (
                f"{i + 1}. {user.name} {user.surname}\n"
                f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization_name}\n"
                f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
                f"   (ID: {user.user_id})"
            )

            accept = InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user.user_id}")
            reject = InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.user_id}")

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [accept, reject]
            ])
            await message.answer(user_info, reply_markup=keyboard)
    else:
        await message.answer("–ù–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@admin_router.message(StateFilter(None), F.text == '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def all_users_handler(message: types.Message):
    users = await get_all_users()
    if users:
        user_list = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        user_list += "\n".join([
            f"{i + 1}. {user.name} {user.surname}\n"
            f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization_name}\n"
            f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"   –†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.role == 'admin' else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if user.role == 'user' else '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π' if user.role == 'undefined' else '–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–π'}\n"
            f"   –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω: {'–ü–µ—Ä–≤—ã–π' if user.price_level == 'first' else '–í—Ç–æ—Ä–æ–π' if user.price_level == 'second' else '–¢—Ä–µ—Ç–∏–π' if user.price_level == 'third' else '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π' if user.price_level == 'fourth' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}\n"
            f"   (ID: {user.user_id})\n"
            for i, user in enumerate(users)
        ])

        max_message_length = 4096
        if len(user_list) > max_message_length:
            chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
            for chunk in chunks:
                await message.answer(chunk)
        else:
            await message.answer(user_list)
    else:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@admin_router.message(StateFilter(None), F.text == '–í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def all_authenticated_users_handler(message: types.Message):
    users = await get_users_with_role_user()
    if users:
        user_list = "\n\n".join([
            f"{i + 1}. {user.name} {user.surname}\n"
            f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization_name}\n"
            f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"   –†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.role == 'admin' else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if user.role == 'user' else '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π' if user.role == 'undefined' else '–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–π'}\n"
            f"   –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω: {'–ü–µ—Ä–≤—ã–π' if user.price_level == 'first' else '–í—Ç–æ—Ä–æ–π' if user.price_level == 'second' else '–¢—Ä–µ—Ç–∏–π' if user.price_level == 'third' else '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π' if user.price_level == 'fourth' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}\n"
            f"   (ID: {user.user_id})"
            for i, user in enumerate(users)
        ])

        max_message_length = 4096
        if len(user_list) > max_message_length:
            chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
            for chunk in chunks:
                await message.answer(chunk)
        else:
            await message.answer(f"–í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{user_list}")
    else:
        await message.answer("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")



@admin_router.message(StateFilter(None), F.text == 'üîÉ–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥')
async def reload_catalog(message: types.Message):
    try:
        await update_catalog()
        await message.answer(f'–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω‚úÖ')
    except FileNotFoundError:
        await message.answer(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞‚ùå\n–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ bot/utils/data/catalog/data.xlsx')

    #TO-DO: –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥ —Å –Ω—É–ª—è, –Ω–æ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ª–µ–≥–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å update_product() –∏ —Ç–∞–∫ –∂–µ