from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from database.models import PriceLevel
from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply.admin_keyboard import create_admin_navigation, create_catalog_navigation
from keyboards.inline.admin_keyboard import create_simple_inline_navigation
from database.db_config import get_all_users, get_users_with_role_cancelled, get_users_with_role_user, get_users_with_role_undefined, update_user_price_level, update_user_role


admin_router = Router(name="admin")
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

class AdminStates(StatesGroup):
    waiting_for_one_user_id = State()
    waiting_for_group_user_ids = State()
    waiting_for_category_selection = State()
    waiting_for_all_users_confirmation = State()
    waiting_for_price_selection = State()


@admin_router.message(StateFilter(None), F.text == 'üì¶ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω')
async def catalog_handler(message: types.Message):
    keyboard = create_catalog_navigation()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –æ–ø—Ü–∏—é", reply_markup=keyboard)

@admin_router.callback_query(lambda c: c.data == "cancel", StateFilter(AdminStates))
@admin_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(callback_query: types.Message | types.CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = create_admin_navigation()
    if isinstance(callback_query, types.CallbackQuery):
        await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)
    else:
        await callback_query.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@admin_router.message(F.text == "–ü–æ–º–µ–Ω—è—Ç—å –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def change_one_user_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å.")
    await state.set_state(AdminStates.waiting_for_one_user_id)

@admin_router.message(F.text == "–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def change_group_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.")
    await state.set_state(AdminStates.waiting_for_group_user_ids)

@admin_router.message(F.text == "–ü–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def change_category_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å. (1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, 2. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, 3. –ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏—é)")
    await state.set_state(AdminStates.waiting_for_category_selection)

@admin_router.message(F.text == "–ü–æ–º–µ–Ω—è—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def change_all_users_handler(message: types.Message, state: FSMContext):
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.set_state(AdminStates.waiting_for_all_users_confirmation)

@admin_router.message(StateFilter(AdminStates.waiting_for_one_user_id))
async def process_one_user_id(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    await state.update_data(user_id=user_id)

    await message.answer(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω.", reply_markup=create_simple_inline_navigation())
    await state.set_state(AdminStates.waiting_for_price_selection)

@admin_router.message(StateFilter(AdminStates.waiting_for_group_user_ids))
async def process_group_user_ids(message: types.Message, state: FSMContext):
    user_ids = message.text.strip().split('\n')
    await state.update_data(user_ids=user_ids)

    await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join(user_ids)}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω.", reply_markup=create_simple_inline_navigation())
    await state.set_state(AdminStates.waiting_for_price_selection)

@admin_router.message(StateFilter(AdminStates.waiting_for_category_selection))
async def process_category_selection(message: types.Message, state: FSMContext):
    category = message.text.strip().lower()
    await state.update_data(category=category)

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω.", reply_markup=create_simple_inline_navigation())
    await state.set_state(AdminStates.waiting_for_price_selection)

@admin_router.message(StateFilter(AdminStates.waiting_for_all_users_confirmation))
async def process_all_users_selection(message: types.Message, state: FSMContext):
    confirmation = message.text.strip().lower()
    if confirmation == '–¥–∞':
        await state.update_data(all=confirmation)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=create_simple_inline_navigation())
        await state.set_state(AdminStates.waiting_for_price_selection)
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=create_admin_navigation())
    await state.clear()

@admin_router.message(StateFilter(AdminStates.waiting_for_price_selection))
async def process_price_selection(message: types.Message, state: FSMContext):
    price_level = message.text.strip()
    price_level_map = {
        '0': PriceLevel.DEFAULT,
        '1': PriceLevel.FIRST,
        '2': PriceLevel.SECOND,
        '3': PriceLevel.THIRD,
        '4': PriceLevel.FOURTH,
    }

    if price_level not in price_level_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –æ—Ç 0 –¥–æ 4.")
        await state.set_state(AdminStates.waiting_for_price_selection)
        return

    selected_price_level = price_level_map[price_level]
    data = await state.get_data()

    if 'user_id' in data:
        user_id = data['user_id']
        result = await update_user_price_level(int(user_id), selected_price_level)

        if result:
            await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {price_level}.")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")

    elif 'user_ids' in data:
        user_ids = data['user_ids']
        for user_id in user_ids:
            result = await update_user_price_level(int(user_id), selected_price_level)
            if result:
                await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {price_level}.")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")

    elif 'category' in data:
        category = data['category']
        if category == "1":
            users = await get_users_with_role_user()
        elif category == "2":
            users = await get_users_with_role_undefined()
        elif category == "3":
            user = await get_users_with_role_cancelled()
        else:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
            return

        for user in users:
            result = await update_user_price_level(int(user.user_id), selected_price_level)
            if result:
                await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} {user.surname} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {price_level}.")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} {user.surname}.")

    elif 'all' in data:
        all_users = await get_all_users()
        for user in all_users:
            result = await update_user_price_level(int(user.user_id), selected_price_level)
            if result:
                await message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} {user.surname} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {price_level}.")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} {user.surname}.")

    await state.clear()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=create_admin_navigation())

