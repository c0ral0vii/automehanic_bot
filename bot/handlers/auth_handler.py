from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from database.db_config import add_user, check_user_role
from utils.validation import validate_phone_number
from keyboards.reply.main_keyboard import create_main_keyboard
from keyboards.inline.auth_keyboard import create_inline_navigation_keyboard
from fsm.auth_fsm import AuthForm
from filters.excluded_message import ExcludedMessage


auth_router = Router(name="auth")
auth_router.message.filter(ExcludedMessage())

@auth_router.message(StateFilter(None), F.text == 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
async def auth_handler(message: types.Message, state: FSMContext):
    keyboard = create_inline_navigation_keyboard()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)
    await state.set_state(AuthForm.name)

@auth_router.callback_query(lambda c: c.data == "cancel", StateFilter(AuthForm))
@auth_router.message(Command("cancel"), StateFilter(AuthForm))
async def cancel_handler(callback_query: types.CallbackQuery | types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()

    keyboard = create_main_keyboard()
    if isinstance(callback_query, types.CallbackQuery):
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard)
    else:
        await callback_query.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard)

@auth_router.callback_query(lambda c: c.data == "back", StateFilter(AuthForm))
@auth_router.message(Command("back"), StateFilter(AuthForm))
async def back_step_handler(callback_query: types.CallbackQuery | types.Message, state: FSMContext):
    current_state = await state.get_state()
    previous = None
    keyboard = create_inline_navigation_keyboard()

    if current_state == AuthForm.name:
        if isinstance(callback_query, types.CallbackQuery):
            await callback_query.message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":', reply_markup=keyboard)
        else:
            await callback_query.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞":', reply_markup=keyboard)
        return

    for step in AuthForm.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            if isinstance(callback_query, types.CallbackQuery):
                await callback_query.message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n{AuthForm.texts[previous.state]}", reply_markup=keyboard)
            else:
                await callback_query.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n{AuthForm.texts[previous.state]}", reply_markup=keyboard)
            return
        previous = step

@auth_router.message(AuthForm.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()

    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return

    await state.update_data(name=name)
    keyboard = create_inline_navigation_keyboard()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=keyboard)
    await state.set_state(AuthForm.surname)

@auth_router.message(AuthForm.surname)
async def process_surname(message: types.Message, state: FSMContext):
    surname = message.text.strip()

    if not surname:
        await message.answer("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return

    await state.update_data(surname=surname)
    keyboard = create_inline_navigation_keyboard()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(AuthForm.organization_name)

@auth_router.message(AuthForm.organization_name)
async def process_organization_name(message: types.Message, state: FSMContext):
    organization_name = message.text.strip()

    if not organization_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    await state.update_data(organization_name=organization_name)
    keyboard = create_inline_navigation_keyboard()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):", reply_markup=keyboard)
    await state.set_state(AuthForm.phone_number)

@auth_router.message(AuthForm.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    if not validate_phone_number(phone_number):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return

    user_data = await state.get_data()
    user_id = message.from_user.id

    user_role = await check_user_role(user_id)

    if user_role == 'user':
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.")
        await state.clear()
        return

    user_added = await add_user(
        user_id=user_id,
        name=user_data['name'],
        surname=user_data['surname'],
        organization_name=user_data['organization_name'],
        phone_number=phone_number
    )

    if user_added:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    else:
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    await state.clear()






