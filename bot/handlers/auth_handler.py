from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from bot.database.config import add_user
from utils.validation import validate_phone_number

auth_router = Router(name="auth")

class AuthForm(StatesGroup):
    name = State()
    surname = State()
    organization_name = State()
    phone_number = State()


@auth_router.message(StateFilter(None), F.text == 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
async def auth_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(AuthForm.name)

@auth_router.message(AuthForm.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()

    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return

    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(AuthForm.surname)

@auth_router.message(AuthForm.surname)
async def process_surname(message: types.Message, state: FSMContext):
    surname = message.text.strip()

    if not surname:
        await message.answer("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:")
        return

    await state.update_data(surname=surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AuthForm.organization_name)

@auth_router.message(AuthForm.organization_name)
async def process_organization_name(message: types.Message, state: FSMContext):
    organization_name = message.text.strip()

    if not organization_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    await state.update_data(organization_name=organization_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    await state.set_state(AuthForm.phone_number)

@auth_router.message(AuthForm.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    if not validate_phone_number(phone_number):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return

    await state.update_data(phone_number=phone_number)

    user_data = await state.get_data()

    await add_user(
        user_id=message.from_user.id,
        username=user_data['name'],
        fullname=user_data['surname'],
        phone=user_data['phone_number']
    )

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
    await state.clear()
